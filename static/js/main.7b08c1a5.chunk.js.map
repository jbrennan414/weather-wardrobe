{"version":3,"sources":["wardrobe.js","App.js","serviceWorker.js","index.js"],"names":["Wardrobe","state","selectedTop","selectedOuterwear","weatherIDCategory","this","props","weatherID","toString","split","lowTemp","className","style","alignItems","Component","App","today","objToday","Date","dayOfWeek","Array","getDay","domEnder","a","test","parseInt","charAt","dayOfMonth","getDate","curMonth","getMonth","fetch","then","res","json","data","console","log","setState","conditions","date","catch","highTemp","weather","id","main","temp_max","temp_min","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0OA8DeA,E,2MA1DXC,MAAQ,G,qHAQJ,IAAIC,EACAC,EAAoB,GACpBC,EAAoBC,KAAKC,MAAMC,UAAUC,WAAWC,MAAM,IAAI,GA8BlE,OAtBIP,EADAG,KAAKC,MAAMI,QAAU,GACP,UACPL,KAAKC,MAAMI,SAAU,IAAML,KAAKC,MAAMI,QAAU,GACzC,sBACPL,KAAKC,MAAMI,SAAW,IAAML,KAAKC,MAAMI,QAAU,GAC1C,aAEA,cAIW,MAAzBL,KAAKC,MAAMC,WAA8C,MAAzBF,KAAKC,MAAMC,WAA2C,MAAtBH,IAChED,EAAoB,qBAGE,MAAtBC,IACAD,EAAoB,eAGpBE,KAAKC,MAAMI,QAAU,KACrBP,EAAoB,oBAIpB,yBAAKQ,UAAU,OAAOC,MA7BZ,CACVC,WAAY,WA6Be,KAAtBV,EACG,6BACI,4BAAKA,GACL,kCAEH,GACD,4BAAKD,GACT,iCACKG,KAAKC,MAAMI,QAAU,GAClB,sCAAkB,0C,GArDnBI,aCkERC,E,2MA/Dbd,MAAQ,G,mFAGa,IAEfe,EAFc,OAGdC,EAAW,IAAIC,KAEnBC,EADU,IAAIC,MAAM,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAClEH,EAASI,UAC7BC,EAAW,WAAa,IAAIC,EAAIN,EAAU,MAAI,IAAIO,KAAKC,UAAUF,EAAI,IAAIG,OAAO,KAAa,KAA+C,KAAzCH,EAAIE,UAAUF,EAAI,IAAIG,OAAO,KAAsB,KAAO,IAAMH,EAAI,KAAO,IAAMA,EAAI,KAAO,KAApL,GACXI,EAAaX,GAAUC,EAASW,UAAY,IAAM,IAAMX,EAASW,UAAYN,EAAWL,EAASW,UAAYN,EAE7GO,EADS,IAAIT,MAAM,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC/GH,EAASa,YAC3Bd,EAAQG,EAAY,KAAOU,EAAW,IAAMF,EAG5CI,MAAM,iHACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACLC,QAAQC,IAAI,oBAAqBF,GACjC,EAAKG,SAAS,CACZC,WAAYJ,EACZK,KAAMxB,OAGTyB,MAAML,QAAQC,O,+BAOjB,IAAIK,EACAhC,EACAH,EAEJ,OAAIF,KAAKJ,MAAMsC,YACbhC,EAAYF,KAAKJ,MAAMsC,WAAWI,QAAQ,GAAGC,GAC7CF,EAAWrC,KAAKJ,MAAMsC,WAAWM,KAAKC,SACtCpC,EAAUL,KAAKJ,MAAMsC,WAAWM,KAAKE,SAMrC,yBAAKpC,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,iBAA0CN,KAAKJ,MAAMuC,MACrD,wBAAI7B,UAAU,iCAAd,6BACA,4DACA,qCAAW+B,EAAX,SACA,oCAAUhC,EAAV,SACA,kBAAC,EAAD,CACEgC,SAAYA,EACZhC,QAAWA,EACXH,UAAaA,OAdZ,2C,GA3CKO,aCSEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.7b08c1a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Wardrobe extends Component {\n\n    state = {\n\n    }\n\n    componentDidMount() {\n    }   \n\n    render() {\n        let selectedTop;\n        let selectedOuterwear = \"\";\n        let weatherIDCategory = this.props.weatherID.toString().split(\"\")[0];\n\n        const style = {\n            alignItems: 'center'\n        }\n\n        //Find tops\n        if (this.props.lowTemp > 75){\n            selectedTop = \"T-Shirt\";\n        } else if (this.props.lowTemp <=75 && this.props.lowTemp > 60){\n            selectedTop = \"Long Sleeve T-Shirt\";\n        } else if (this.props.lowTemp <= 60 && this.props.lowTemp > 50){\n            selectedTop = \"Sweatshirt\";\n        } else {\n            selectedTop = \"Quarter Zip\"\n        }\n\n        //Outwear selection\n        if (this.props.weatherID === 500 || this.props.weatherID === 501 || weatherIDCategory === \"3\"){\n            selectedOuterwear = \"Light Rain Jacket\"\n        }\n\n        if (weatherIDCategory === \"2\"){\n            selectedOuterwear = \"Rain Jacket\";\n        }\n\n        if (this.props.lowTemp < 35){\n            selectedOuterwear = \"Down Winter Coat\"\n        }\n\n        return (\n            <div className=\"card\" style = {style}>\n                {selectedOuterwear !== \"\" ? (\n                    <div>\n                        <h1>{selectedOuterwear}</h1>\n                        <h4>&</h4>\n                    </div>\n                ) : (\"\")}\n                    <h1>{selectedTop}</h1>\n                <h4>&</h4>\n                    {this.props.lowTemp > 65 ? \n                        <h1>Shorts</h1> : <h1>Pants</h1>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Wardrobe;","import React, { Component } from 'react';\nimport Wardrobe from './wardrobe';\n\nclass App extends Component {\n\n  state = {\n  }\n\n  componentDidMount() {\n\n    var today;\n    var objToday = new Date(),\n    weekday = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'),\n    dayOfWeek = weekday[objToday.getDay()],\n    domEnder = function() { var a = objToday; if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\"; a = parseInt((a + \"\").charAt(1)); return 1 === a ? \"st\" : 2 === a ? \"nd\" : 3 === a ? \"rd\" : \"th\" }(),\n    dayOfMonth = today + ( objToday.getDate() < 10) ? '0' + objToday.getDate() + domEnder : objToday.getDate() + domEnder,\n    months = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'),\n    curMonth = months[objToday.getMonth()];\n    today = dayOfWeek + \", \" + curMonth + \" \" + dayOfMonth;\n\n    //fetch our weather data\n    fetch('http://api.openweathermap.org/data/2.5/weather?q=denver&APPID='+ process.env.REACT_APP_API_KEY +'&units=imperial')\n      .then(res => res.json())\n      .then((data) => {\n        console.log(\"THIS IS YOUR DATA\", data)\n        this.setState({ \n          conditions: data, \n          date: today,\n        })\n      })\n      .catch(console.log)\n\n    }\n\n\n  render() {\n\n    let highTemp;\n    let lowTemp;\n    let weatherID\n\n    if (this.state.conditions) {\n      weatherID = this.state.conditions.weather[0].id;\n      highTemp = this.state.conditions.main.temp_max;\n      lowTemp = this.state.conditions.main.temp_min;\n    } else {\n      return <h1>Loading</h1>\n    }\n\n    return (\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Today's Date: {this.state.date}</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">What should I wear today?</h6>\n          <h5>Today's Conditions in Denver</h5>\n          <h6>High: {highTemp}°F</h6>\n          <h6>Low: {lowTemp}°F</h6>\n          <Wardrobe \n            highTemp = {highTemp}\n            lowTemp = {lowTemp}\n            weatherID = {weatherID}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}